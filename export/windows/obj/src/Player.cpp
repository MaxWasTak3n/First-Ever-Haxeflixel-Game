// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_AssetPaths
#include <AssetPaths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_10_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",10,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)4,(int)5,(int)6,(int)7,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)8,(int)9,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)10,(int)11,
};
static const int _hx_array_data_6c4d5f81_4[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_27_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",27,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_34_updateMovement,"Player","updateMovement",0xab7266a5,"Player.updateMovement","Player.hx",34,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_6c4d5f81_9[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_6c4d5f81_10[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_6c4d5f81_11[] = {
	(int)39,(int)68,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_12_boot,"Player","boot",0x156e003f,"Player.boot","Player.hx",12,0xa27fc9dd)

void Player_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_10_new)
HXLINE(  13)		this->running = false;
HXLINE(  18)		super::__construct(x,y,null());
HXLINE(  19)		this->loadGraphic(::AssetPaths_obj::image(HX_("player",61,eb,b8,37)),true,12,18,null(),null());
HXLINE(  20)		this->animation->add(HX_("left-right",d6,8f,ef,e1),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,4),6,true,null(),null());
HXLINE(  21)		this->animation->add(HX_("down",62,f8,6d,42),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,2),6,true,null(),null());
HXLINE(  22)		this->animation->add(HX_("up",5b,66,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,2),6,true,null(),null());
HXLINE(  23)		this->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_4,4),6,true,null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33e526a5) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x33e526a5;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_27_update)
HXLINE(  28)		if ((::Player_obj::speed >= 1)) {
HXLINE(  29)			::Player_obj::speed = ( (Float)(1) );
            		}
HXLINE(  30)		this->updateMovement();
HXLINE(  31)		this->super::update(elapsed);
            	}


void Player_obj::updateMovement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_34_updateMovement)
HXLINE(  36)		Float ogSpeed = ::Player_obj::speed;
HXLINE(  37)		bool up = false;
HXLINE(  38)		bool down = false;
HXLINE(  39)		bool left = false;
HXLINE(  40)		bool right = false;
HXLINE(  42)		up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,2),1);
HXLINE(  43)		down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_9,2),1);
HXLINE(  44)		left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_10,2),1);
HXLINE(  45)		right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_11,2),1);
HXLINE(  47)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  47)		if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE(  48)			this->running = true;
            		}
            		else {
HXLINE(  50)			this->running = false;
            		}
HXLINE(  53)		if (this->running) {
HXLINE(  54)			::Player_obj::speed = (ogSpeed + ((Float)0.4));
            		}
            		else {
HXLINE(  56)			::Player_obj::speed = ogSpeed;
            		}
HXLINE(  58)		bool _hx_tmp;
HXDLIN(  58)		if (up) {
HXLINE(  58)			_hx_tmp = down;
            		}
            		else {
HXLINE(  58)			_hx_tmp = false;
            		}
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  59)			down = false;
HXDLIN(  59)			up = down;
            		}
HXLINE(  60)		bool _hx_tmp1;
HXDLIN(  60)		if (left) {
HXLINE(  60)			_hx_tmp1 = right;
            		}
            		else {
HXLINE(  60)			_hx_tmp1 = false;
            		}
HXDLIN(  60)		if (_hx_tmp1) {
HXLINE(  61)			right = false;
HXDLIN(  61)			left = right;
            		}
HXLINE(  63)		if (up) {
HXLINE(  64)			::PlayState_obj::player->set_y((::PlayState_obj::player->y - ::Player_obj::speed));
HXLINE(  65)			this->dir = HX_("UP",5b,4a,00,00);
            		}
HXLINE(  67)		if (down) {
HXLINE(  68)			::PlayState_obj::player->set_y((::PlayState_obj::player->y + ::Player_obj::speed));
HXLINE(  69)			this->dir = HX_("DOWN",62,c0,2e,2d);
            		}
HXLINE(  71)		if (left) {
HXLINE(  72)			::PlayState_obj::player->set_x((::PlayState_obj::player->x - ::Player_obj::speed));
HXLINE(  73)			this->dir = HX_("LEFT",07,d0,70,32);
HXLINE(  74)			::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::player->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),((Float)-0.6))),((Float)0.09), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
            		}
HXLINE(  76)		if (right) {
HXLINE(  77)			::PlayState_obj::player->set_x((::PlayState_obj::player->x + ::Player_obj::speed));
HXLINE(  78)			this->dir = HX_("RIGHT",bc,43,52,67);
HXLINE(  79)			::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::player->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),((Float)0.6))),((Float)0.09), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),::flixel::tweens::FlxTween_obj::ONESHOT)));
            		}
HXLINE(  82)		bool _hx_tmp2;
HXDLIN(  82)		bool _hx_tmp3;
HXDLIN(  82)		bool _hx_tmp4;
HXDLIN(  82)		if (!(right)) {
HXLINE(  82)			_hx_tmp4 = !(left);
            		}
            		else {
HXLINE(  82)			_hx_tmp4 = false;
            		}
HXDLIN(  82)		if (_hx_tmp4) {
HXLINE(  82)			_hx_tmp3 = !(up);
            		}
            		else {
HXLINE(  82)			_hx_tmp3 = false;
            		}
HXDLIN(  82)		if (_hx_tmp3) {
HXLINE(  82)			_hx_tmp2 = !(down);
            		}
            		else {
HXLINE(  82)			_hx_tmp2 = false;
            		}
HXDLIN(  82)		if (_hx_tmp2) {
HXLINE(  83)			this->dir = HX_("NONE",b8,da,ca,33);
            		}
HXLINE(  86)		::String _hx_switch_0 = this->dir;
            		if (  (_hx_switch_0==HX_("DOWN",62,c0,2e,2d)) ){
HXLINE(  91)			this->animation->play(HX_("down",62,f8,6d,42),null(),null(),null());
HXDLIN(  91)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("LEFT",07,d0,70,32)) ){
HXLINE(  93)			::PlayState_obj::player->animation->play(HX_("left-right",d6,8f,ef,e1),null(),null(),null());
HXDLIN(  93)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("NONE",b8,da,ca,33)) ){
HXLINE(  97)			::PlayState_obj::player->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXDLIN(  97)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("RIGHT",bc,43,52,67)) ){
HXLINE(  95)			::PlayState_obj::player->animation->play(HX_("left-right",d6,8f,ef,e1),null(),null(),null());
HXDLIN(  95)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("UP",5b,4a,00,00)) ){
HXLINE(  89)			this->animation->play(HX_("up",5b,66,00,00),null(),null(),null());
HXDLIN(  89)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,updateMovement,(void))

Float Player_obj::speed;


::hx::ObjectPtr< Player_obj > Player_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(dir,"dir");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(dir,"dir");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { return ::hx::Val( dir ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { return ::hx::Val( running ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateMovement") ) { return ::hx::Val( updateMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Player_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { outValue = ( speed ); return true; }
	}
	return false;
}

::hx::Val Player_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Player_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("running",ff,6d,69,eb));
	outFields->push(HX_("dir",4d,3d,4c,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Player_obj,running),HX_("running",ff,6d,69,eb)},
	{::hx::fsString,(int)offsetof(Player_obj,dir),HX_("dir",4d,3d,4c,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Player_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Player_obj::speed,HX_("speed",87,97,69,81)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("running",ff,6d,69,eb),
	HX_("dir",4d,3d,4c,00),
	HX_("update",09,86,05,87),
	HX_("updateMovement",58,78,61,35),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::speed,"speed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::speed,"speed");
};

#endif

::hx::Class Player_obj::__mClass;

static ::String Player_obj_sStaticFields[] = {
	HX_("speed",87,97,69,81),
	::String(null())
};

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Player_obj::__GetStatic;
	__mClass->mSetStaticField = &Player_obj::__SetStatic;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Player_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Player_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_12_boot)
HXDLIN(  12)		speed = ((Float)0.6);
            	}
}

