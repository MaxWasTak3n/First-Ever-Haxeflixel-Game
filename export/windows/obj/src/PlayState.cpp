// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_AssetPaths
#include <AssetPaths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmo3Loader
#include <flixel/addons/editors/ogmo/FlxOgmo3Loader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_18_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",18,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_48_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",48,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_130_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",130,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_18_new)
HXLINE(  35)		this->xpAmount = 5000;
HXLINE(  34)		this->health = 3;
HXLINE(  33)		this->money = 0;
HXLINE(  32)		this->roomNum = 1;
HXLINE(  18)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_48_create)
HXLINE(  50)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  52)		::String _hx_tmp = ::AssetPaths_obj::ogmo(HX_("room1",b6,69,61,ed));
HXDLIN(  52)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmo3Loader_obj::__alloc( HX_CTX ,_hx_tmp,::AssetPaths_obj::json(HX_("room1",b6,69,61,ed)));
HXLINE(  54)		 ::flixel::addons::editors::ogmo::FlxOgmo3Loader _hx_tmp1 = this->map;
HXDLIN(  54)		this->ground = _hx_tmp1->loadTilemap(::AssetPaths_obj::image(HX_("tiles",85,fd,34,10)),HX_("walls",29,0c,1f,c5),null());
HXLINE(  55)		this->ground->follow(null(),null(),null());
HXLINE(  56)		this->ground->setTileProperties(1,0,null(),null(),null());
HXLINE(  57)		this->ground->setTileProperties(2,4369,null(),null(),null());
HXLINE(  58)		this->add(this->ground);
HXLINE(  60)		 ::flixel::addons::editors::ogmo::FlxOgmo3Loader _hx_tmp2 = this->map;
HXDLIN(  60)		this->houseSmall = _hx_tmp2->loadTilemap(::AssetPaths_obj::image(HX_("houseSmall",07,8d,c3,db)),HX_("house",a0,2f,64,2b),null());
HXLINE(  61)		this->houseSmall->follow(null(),null(),null());
HXLINE(  62)		this->houseSmall->setTileProperties(1,4369,null(),null(),null());
HXLINE(  63)		this->add(this->houseSmall);
HXLINE(  65)		::PlayState_obj::player =  ::Player_obj::__alloc( HX_CTX ,100,100);
HXLINE(  66)		::PlayState_obj::player->scale->set(((Float)0.6),((Float)0.6));
HXLINE(  67)		this->add(::PlayState_obj::player);
HXLINE(  69)		this->set_camera( ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null()));
HXLINE(  70)		this->hud =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  71)		 ::flixel::_hx_system::frontEnds::CameraFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::cameras;
HXDLIN(  71)		_hx_tmp3->reset(this->get_camera());
HXLINE(  72)		::flixel::FlxG_obj::cameras->add(this->hud,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  73)		this->get_camera()->setScrollBoundsRect(0,0,640,480,null());
HXLINE(  74)		this->get_camera()->follow(::PlayState_obj::player,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),((Float)0.9));
HXLINE(  75)		this->hud->bgColor = 0;
HXLINE(  76)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->get_camera());
HXLINE(  78)		 ::flixel::FlxCamera _hx_tmp4 = this->get_camera();
HXDLIN(  78)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp4, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)5.5))),((Float)0.1),null());
HXLINE(  80)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
HXLINE(  83)		this->hudBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,100,-16777216,null(),null());
HXLINE(  84)		this->hudBG->set_alpha(((Float)0.7));
HXLINE(  86)		this->healthIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),::AssetPaths_obj::image(HX_("health",9c,28,06,fd)));
HXLINE(  87)		this->healthIcon->scale->set(8,8);
HXLINE(  88)		 ::flixel::FlxSprite _hx_tmp5 = this->healthIcon;
HXDLIN(  88)		Float _hx_tmp6 = (this->hudBG->x / ( (Float)(4) ));
HXDLIN(  88)		_hx_tmp5->set_x(((_hx_tmp6 + (this->healthIcon->get_width() / ( (Float)(2) ))) + 40));
HXLINE(  89)		 ::flixel::FlxSprite _hx_tmp7 = this->healthIcon;
HXDLIN(  89)		Float _hx_tmp8 = (this->hudBG->get_height() / ( (Float)(2) ));
HXDLIN(  89)		_hx_tmp7->set_y((_hx_tmp8 - (this->healthIcon->get_height() / ( (Float)(2) ))));
HXLINE(  91)		this->healthText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,((this->health + HX_(" / ",31,71,18,00)) + this->health),30,null());
HXLINE(  92)		 ::flixel::text::FlxText _hx_tmp9 = this->healthText;
HXDLIN(  92)		_hx_tmp9->setFormat(::AssetPaths_obj::font(HX_("font",cf,5d,c0,43)),40,-65536,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  93)		this->healthText->set_borderSize(((Float)1.25));
HXLINE(  94)		this->healthText->set_x((this->healthIcon->x + 50));
HXLINE(  95)		this->healthText->set_y((this->healthIcon->y / ( (Float)(2) )));
HXLINE(  97)		this->xpIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),::AssetPaths_obj::image(HX_("xp",f8,68,00,00)));
HXLINE(  98)		this->xpIcon->scale->set(8,8);
HXLINE(  99)		 ::flixel::FlxSprite _hx_tmp10 = this->xpIcon;
HXDLIN(  99)		int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN(  99)		_hx_tmp10->set_x(((( (Float)(_hx_tmp11) ) - (this->xpIcon->get_width() / ( (Float)(2) ))) - ( (Float)(40) )));
HXLINE( 100)		 ::flixel::FlxSprite _hx_tmp12 = this->xpIcon;
HXDLIN( 100)		Float _hx_tmp13 = (this->hudBG->get_height() / ( (Float)(2) ));
HXDLIN( 100)		_hx_tmp12->set_y((_hx_tmp13 - (this->xpIcon->get_height() / ( (Float)(2) ))));
HXLINE( 102)		this->xpText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,(HX_("",00,00,00,00) + this->xpAmount),30,null());
HXLINE( 103)		 ::flixel::text::FlxText _hx_tmp14 = this->xpText;
HXDLIN( 103)		_hx_tmp14->setFormat(::AssetPaths_obj::font(HX_("font",cf,5d,c0,43)),40,-16744448,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 104)		this->xpText->set_borderSize(((Float)1.25));
HXLINE( 105)		if ((this->xpAmount <= 1000)) {
HXLINE( 106)			 ::flixel::text::FlxText _hx_tmp = this->xpText;
HXDLIN( 106)			Float _hx_tmp1 = this->xpIcon->x;
HXDLIN( 106)			_hx_tmp->set_x(((_hx_tmp1 - this->xpIcon->get_width()) - ( (Float)(100) )));
            		}
            		else {
HXLINE( 107)			if ((this->xpAmount <= 10000)) {
HXLINE( 108)				 ::flixel::text::FlxText _hx_tmp = this->xpText;
HXDLIN( 108)				Float _hx_tmp1 = this->xpIcon->x;
HXDLIN( 108)				_hx_tmp->set_x(((_hx_tmp1 - this->xpIcon->get_width()) - ( (Float)(170) )));
            			}
            			else {
HXLINE( 110)				 ::flixel::text::FlxText _hx_tmp = this->xpText;
HXDLIN( 110)				Float _hx_tmp1 = this->xpIcon->x;
HXDLIN( 110)				_hx_tmp->set_x(((_hx_tmp1 - this->xpIcon->get_width()) - ( (Float)(200) )));
            			}
            		}
HXLINE( 111)		this->xpText->set_y((this->xpIcon->y / ( (Float)(2) )));
HXLINE( 113)		this->hudBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->hud));
HXLINE( 114)		this->healthIcon->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->hud));
HXLINE( 115)		this->xpIcon->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->hud));
HXLINE( 116)		this->healthText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->hud));
HXLINE( 117)		this->xpText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->hud));
HXLINE( 119)		this->add(this->hudBG);
HXLINE( 120)		this->add(this->healthIcon);
HXLINE( 121)		this->add(this->xpIcon);
HXLINE( 122)		this->add(this->healthText);
HXLINE( 123)		this->add(this->xpText);
HXLINE( 126)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_130_update)
HXLINE( 131)		this->super::update(elapsed);
HXLINE( 133)		{
HXLINE( 133)			 ::Dynamic NotifyCallback = null();
HXDLIN( 133)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(::PlayState_obj::player) ),( ( ::flixel::FlxBasic)(this->houseSmall) ),NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            		}
            	}


 ::Player PlayState_obj::player;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(hud,"hud");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(ground,"ground");
	HX_MARK_MEMBER_NAME(houseSmall,"houseSmall");
	HX_MARK_MEMBER_NAME(epicCamTween,"epicCamTween");
	HX_MARK_MEMBER_NAME(roomNum,"roomNum");
	HX_MARK_MEMBER_NAME(money,"money");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(xpAmount,"xpAmount");
	HX_MARK_MEMBER_NAME(facing,"facing");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(healthIcon,"healthIcon");
	HX_MARK_MEMBER_NAME(healthText,"healthText");
	HX_MARK_MEMBER_NAME(xpIcon,"xpIcon");
	HX_MARK_MEMBER_NAME(xpText,"xpText");
	HX_MARK_MEMBER_NAME(hudBG,"hudBG");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(hud,"hud");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(ground,"ground");
	HX_VISIT_MEMBER_NAME(houseSmall,"houseSmall");
	HX_VISIT_MEMBER_NAME(epicCamTween,"epicCamTween");
	HX_VISIT_MEMBER_NAME(roomNum,"roomNum");
	HX_VISIT_MEMBER_NAME(money,"money");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(xpAmount,"xpAmount");
	HX_VISIT_MEMBER_NAME(facing,"facing");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(healthIcon,"healthIcon");
	HX_VISIT_MEMBER_NAME(healthText,"healthText");
	HX_VISIT_MEMBER_NAME(xpIcon,"xpIcon");
	HX_VISIT_MEMBER_NAME(xpText,"xpText");
	HX_VISIT_MEMBER_NAME(hudBG,"hudBG");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hud") ) { return ::hx::Val( hud ); }
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { return ::hx::Val( money ); }
		if (HX_FIELD_EQ(inName,"hudBG") ) { return ::hx::Val( hudBG ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ground") ) { return ::hx::Val( ground ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"facing") ) { return ::hx::Val( facing ); }
		if (HX_FIELD_EQ(inName,"xpIcon") ) { return ::hx::Val( xpIcon ); }
		if (HX_FIELD_EQ(inName,"xpText") ) { return ::hx::Val( xpText ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roomNum") ) { return ::hx::Val( roomNum ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xpAmount") ) { return ::hx::Val( xpAmount ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"houseSmall") ) { return ::hx::Val( houseSmall ); }
		if (HX_FIELD_EQ(inName,"healthIcon") ) { return ::hx::Val( healthIcon ); }
		if (HX_FIELD_EQ(inName,"healthText") ) { return ::hx::Val( healthText ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"epicCamTween") ) { return ::hx::Val( epicCamTween ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { outValue = ( player ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hud") ) { hud=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmo3Loader >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { money=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hudBG") ) { hudBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ground") ) { ground=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"facing") ) { facing=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xpIcon") ) { xpIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xpText") ) { xpText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roomNum") ) { roomNum=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xpAmount") ) { xpAmount=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"houseSmall") ) { houseSmall=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthIcon") ) { healthIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthText") ) { healthText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"epicCamTween") ) { epicCamTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=ioValue.Cast<  ::Player >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("hud",b7,50,4f,00));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("ground",87,22,28,1c));
	outFields->push(HX_("houseSmall",07,8d,c3,db));
	outFields->push(HX_("epicCamTween",01,3e,16,bf));
	outFields->push(HX_("roomNum",eb,2a,ee,17));
	outFields->push(HX_("money",40,ba,5f,0c));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("xpAmount",f0,f8,a0,0a));
	outFields->push(HX_("facing",1a,3f,05,e4));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("healthIcon",35,ba,48,02));
	outFields->push(HX_("healthText",69,9f,8f,09));
	outFields->push(HX_("xpIcon",91,58,40,a8));
	outFields->push(HX_("xpText",c5,3d,87,af));
	outFields->push(HX_("hudBG",3c,66,4e,2f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,hud),HX_("hud",b7,50,4f,00)},
	{::hx::fsObject /*  ::flixel::addons::editors::ogmo::FlxOgmo3Loader */ ,(int)offsetof(PlayState_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,ground),HX_("ground",87,22,28,1c)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,houseSmall),HX_("houseSmall",07,8d,c3,db)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,epicCamTween),HX_("epicCamTween",01,3e,16,bf)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,roomNum),HX_("roomNum",eb,2a,ee,17)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,money),HX_("money",40,ba,5f,0c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,xpAmount),HX_("xpAmount",f0,f8,a0,0a)},
	{::hx::fsString,(int)offsetof(PlayState_obj,facing),HX_("facing",1a,3f,05,e4)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthIcon),HX_("healthIcon",35,ba,48,02)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,healthText),HX_("healthText",69,9f,8f,09)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,xpIcon),HX_("xpIcon",91,58,40,a8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,xpText),HX_("xpText",c5,3d,87,af)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,hudBG),HX_("hudBG",3c,66,4e,2f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(void *) &PlayState_obj::player,HX_("player",61,eb,b8,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("hud",b7,50,4f,00),
	HX_("map",9c,0a,53,00),
	HX_("ground",87,22,28,1c),
	HX_("houseSmall",07,8d,c3,db),
	HX_("epicCamTween",01,3e,16,bf),
	HX_("roomNum",eb,2a,ee,17),
	HX_("money",40,ba,5f,0c),
	HX_("health",9c,28,06,fd),
	HX_("xpAmount",f0,f8,a0,0a),
	HX_("facing",1a,3f,05,e4),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("healthIcon",35,ba,48,02),
	HX_("healthText",69,9f,8f,09),
	HX_("xpIcon",91,58,40,a8),
	HX_("xpText",c5,3d,87,af),
	HX_("hudBG",3c,66,4e,2f),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::player,"player");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::player,"player");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("player",61,eb,b8,37),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

