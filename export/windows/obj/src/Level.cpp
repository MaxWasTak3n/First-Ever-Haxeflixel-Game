// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObject
#include <flixel/addons/editors/tiled/TiledObject.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObjectLayer
#include <flixel/addons/editors/tiled/TiledObjectLayer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_11_new,"Level","new",0x0b84a856,"Level.new","Level.hx",11,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_27_update,"Level","update",0x594f8bd3,"Level.update","Level.hx",27,0x000d33da)

void Level_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_11_new)
HXLINE(  12)		super::__construct(this->x,this->y,null());
HXLINE(  13)		 ::flixel::addons::editors::tiled::TiledMap map =  ::flixel::addons::editors::tiled::TiledMap_obj::__alloc( HX_CTX ,HX_("assets/data/levelMain.tmx",35,7b,0e,09),null());
HXLINE(  14)		 ::flixel::addons::editors::tiled::TiledObjectLayer groundLayer = ( ( ::flixel::addons::editors::tiled::TiledObjectLayer)(map->getLayer(HX_("ground",87,22,28,1c))) );
HXLINE(  15)		 ::flixel::group::FlxTypedGroup groundGrp =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  17)		{
HXLINE(  17)			int _g = 0;
HXDLIN(  17)			::Array< ::Dynamic> _g1 = groundLayer->objects;
HXDLIN(  17)			while((_g < _g1->length)){
HXLINE(  17)				 ::flixel::addons::editors::tiled::TiledObject ground = _g1->__get(_g).StaticCast<  ::flixel::addons::editors::tiled::TiledObject >();
HXDLIN(  17)				_g = (_g + 1);
HXLINE(  18)				 ::flixel::FlxSprite groundSprt =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,ground->x,ground->y,null());
HXLINE(  19)				groundSprt->loadGraphic(HX_("assets/images/ground.png",ad,4a,92,f9),false,400,32,null(),null());
HXLINE(  20)				groundGrp->add(groundSprt).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}

Dynamic Level_obj::__CreateEmpty() { return new Level_obj; }

void *Level_obj::_hx_vtable = 0;

Dynamic Level_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Level_obj > _hx_result = new Level_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Level_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x518982dc) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x518982dc;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Level_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_27_update)
HXDLIN(  27)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Level_obj > Level_obj::__new() {
	::hx::ObjectPtr< Level_obj > __this = new Level_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Level_obj > Level_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Level_obj *__this = (Level_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Level_obj), true, "Level"));
	*(void **)__this = Level_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Level_obj::Level_obj()
{
}

::hx::Val Level_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Level_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Level_obj_sStaticStorageInfo = 0;
#endif

static ::String Level_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Level_obj::__mClass;

void Level_obj::__register()
{
	Level_obj _hx_dummy;
	Level_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Level",64,85,90,05);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Level_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Level_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Level_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Level_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

